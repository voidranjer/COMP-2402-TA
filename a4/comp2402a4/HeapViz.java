package comp2402a4;

/* autogenerated by Processing revision 1293 on 2023-11-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class HeapViz extends PApplet {

  int treeHeight = 3; // Change this to the desired height of the binary tree
  int[] values = { 3, 5, 2, 7, 9, 1, 4, 6, 8, 1, 2, 3, 4, 5 };

  public void setup() {
    /* size commented out by preprocessor */;
    background(255);
    drawBinaryTree();
  }

  // Get index of left child
  public int getLeftChildIndex(int i) {
    return 2 * i + 1;
  }

  // Get index of right child
  public int getRightChildIndex(int i) {
    return 2 * i + 2;
  }

  public void drawBinaryTree() {
    drawBinaryTree(width / 2, 50, treeHeight, width / 4, 0);
  }

  public void drawBinaryTree(float x, float y, int height, float branchLength, int index) {
    // Draw the current node
    fill(255);
    ellipse(x, y, 30, 30);

    fill(0);
    text(values[index], x, y);

    // Base case
    if (height <= 1)
      return;

    // Calculate the positions of child nodes
    float leftX = x - branchLength;
    float rightX = x + branchLength;
    float nextY = y + 100;

    // Draw lines to connect the current node to its child nodes
    line(x, y + 15, leftX, nextY - 15);
    line(x, y + 15, rightX, nextY - 15);

    // Recursively draw the left and right subtrees
    drawBinaryTree(leftX, nextY, height - 1, branchLength / 2, getLeftChildIndex(index));
    drawBinaryTree(rightX, nextY, height - 1, branchLength / 2, getRightChildIndex(index));

  }

  public void settings() {
    size(800, 600);
  }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "HeapViz" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
