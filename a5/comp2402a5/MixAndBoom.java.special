package comp2402a5;
// Thanks to Pat Morin for the skeleton of this file!

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class MixAndBoom {

    /**
     * Your code goes here
     *
     * @param r the reader to read from
     * @param w the writer to write to
     * @throws IOException
     */
    public static void doIt(BufferedReader r, PrintWriter w) throws IOException {
        //TODO: Your solution goes here. This example only shows how you can read the input.
        HashMap<String, Integer> name2Vertex = new HashMap<>();
        ArrayList<String> u1 = new ArrayList<>();
        ArrayList<String> v1 = new ArrayList<>();
        int N = Integer.parseInt(r.readLine());
        Graph g = new AdjacencyLists(N + 1);

        Integer startNode = null;

        //Graph g = new AdjacencyLists(16);
        //System.out.println("hello");
        for (String line = r.readLine(); line != null; line = r.readLine()) {

            String[] splitted = line.split(" ");
            int u = Integer.parseInt(splitted[0]), v = Integer.parseInt(splitted[1]);
            startNode = u;

            g.addEdge(u, v);
            g.addEdge(v, u);
            //System.out.println("hwllo");
            //g.addEdge(u, v);
            // u1.add(u + "");
            // v1.add(v + "");
            // if (!name2Vertex.containsKey(u + "") && !name2Vertex.containsKey(v + "")) {

            //     name2Vertex.put(u + "", g.addVertex());
            //     name2Vertex.put(v + "", g.addVertex());
            //     // g.addEdge(name2Vertex.get(u + ""), name2Vertex.get(v + ""));
            // } else if (name2Vertex.containsKey(u + "") && !name2Vertex.containsKey(v + "")) {

            //     name2Vertex.put(v + "", g.addVertex());
            //     //g.addEdge(name2Vertex.get(u + ""), name2Vertex.get(v + ""));
            // } else if (!name2Vertex.containsKey(u + "") && name2Vertex.containsKey(v + "")) {

            //     name2Vertex.put(u + "", g.addVertex());
            //     //g.addEdge(name2Vertex.get(u + ""), name2Vertex.get(v + ""));
            // } else {
            //     //g.addEdge(name2Vertex.get(u + ""), name2Vertex.get(v + ""));
            // }

//            name2Vertex.put(u + "", g.addVertex());
//            name2Vertex.put(v + "", g.addVertex());
//            g.addEdge(name2Vertex.get(u + ""), name2Vertex.get(v + ""));
            //  w.println(u + " " + v);

        }

        // for (int i = 0; i < u1.size(); i++) {
        //     g.addEdge(name2Vertex.get(u1.get(i)), name2Vertex.get(v1.get(i)));
        //     g.addEdge(name2Vertex.get(v1.get(i)), name2Vertex.get(u1.get(i)));
        // }

        // if (MixAndBoom.startNode )

        if(isBipartite(g, startNode)){
            w.println("yes");
        }else{
            w.println("no");
        }
    }

    // Algorithms.dfsZ(g, 0);
    //Algorithms.dfs2Z(g, 0);
    // System.out.println(name2Vertex.toString());


    public static boolean isBipartite(Graph g, Integer node) {
        HashMap<Integer, Boolean> colors = new HashMap<>();
		colors.put(node, true);

		boolean[] explored = new boolean[g.nVertices()];
		Queue<Integer> q = new LinkedList<Integer>();
		q.add(node);
		explored[node] = true;
		while (!q.isEmpty()) {
			int i = q.remove();

			for (Integer j : g.outEdges(i)) {
				if (!explored[j]) {
					q.add(j);
					explored[j] = true;
				}
				boolean thisColor = colors.get(i);
				for (Integer neigh : g.outEdges(i)) {
					if (colors.get(neigh) != null && (colors.get(neigh) && thisColor)) {
                        return false;
                    }
					colors.put(neigh, !thisColor);
				}
			}
		}

		return true;
	}

    // private static boolean bfsBipartite(Graph g, int start, int[] colors) {
    //     Queue<Integer> queue = new LinkedList<>();
    //     queue.add(start);
    //     colors[start] = 0;

    //     while (!queue.isEmpty()) {
    //         int current = queue.poll();

    //         for (int neighbor : g.outEdges(current)) {
    //             if (colors[neighbor] == -1) {
    //                 colors[neighbor] = 1 - colors[current];
    //                 queue.add(neighbor);
    //             } else if (colors[neighbor] == colors[current]) {
    //                 return false;
    //             }
    //         }
    //     }

    //     return true;
    // }

    /**
     * The driver. Open a BufferedReader and a PrintWriter, either from
     * System.in and System.out or from filenames specified on the command line,
     * then call doIt.
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            BufferedReader r;
            PrintWriter w;
            if (args.length == 0) {
                r = new BufferedReader(new InputStreamReader(System.in));
                w = new PrintWriter(System.out);
            } else if (args.length == 1) {
                r = new BufferedReader(new FileReader(args[0]));
                w = new PrintWriter(System.out);
            } else {
                r = new BufferedReader(new FileReader(args[0]));
                w = new PrintWriter(new FileWriter(args[1]));
            }
            long start = System.nanoTime();
            doIt(r, w);
            w.flush();
            long stop = System.nanoTime();
            System.out.println("Execution time: " + 1e-9 * (stop-start));
        } catch (IOException e) {
            System.err.println(e);
            System.exit(-1);
        }
    }
}
